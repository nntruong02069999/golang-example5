// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: build.proto

package proto

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserPartner struct {
	Id          string           `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PartnerId   string           `protobuf:"bytes,3,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	AliasUserId string           `protobuf:"bytes,5,opt,name=alias_user_id,json=aliasUserId,proto3" json:"alias_user_id,omitempty"`
	Apps        map[string]int64 `protobuf:"bytes,6,rep,name=apps,proto3" json:"apps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Phone       string           `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Created     int64            `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	UpdatedAt   int64            `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *UserPartner) Reset()         { *m = UserPartner{} }
func (m *UserPartner) String() string { return proto.CompactTextString(m) }
func (*UserPartner) ProtoMessage()    {}
func (*UserPartner) Descriptor() ([]byte, []int) {
	return fileDescriptor_14ce178a580e4ede, []int{0}
}
func (m *UserPartner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPartner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPartner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPartner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPartner.Merge(m, src)
}
func (m *UserPartner) XXX_Size() int {
	return m.Size()
}
func (m *UserPartner) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPartner.DiscardUnknown(m)
}

var xxx_messageInfo_UserPartner proto.InternalMessageInfo

func (m *UserPartner) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserPartner) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserPartner) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *UserPartner) GetAliasUserId() string {
	if m != nil {
		return m.AliasUserId
	}
	return ""
}

func (m *UserPartner) GetApps() map[string]int64 {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *UserPartner) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserPartner) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *UserPartner) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type UserPartnerRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Phone  string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Limit  int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *UserPartnerRequest) Reset()         { *m = UserPartnerRequest{} }
func (m *UserPartnerRequest) String() string { return proto.CompactTextString(m) }
func (*UserPartnerRequest) ProtoMessage()    {}
func (*UserPartnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_14ce178a580e4ede, []int{1}
}
func (m *UserPartnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPartnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPartnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPartnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPartnerRequest.Merge(m, src)
}
func (m *UserPartnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserPartnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPartnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserPartnerRequest proto.InternalMessageInfo

func (m *UserPartnerRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserPartnerRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserPartnerRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*UserPartner)(nil), "pb.UserPartner")
	proto.RegisterMapType((map[string]int64)(nil), "pb.UserPartner.AppsEntry")
	proto.RegisterType((*UserPartnerRequest)(nil), "pb.UserPartnerRequest")
}

func init() { proto.RegisterFile("build.proto", fileDescriptor_14ce178a580e4ede) }

var fileDescriptor_14ce178a580e4ede = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x9b, 0xd4, 0x6d, 0xf4, 0xad, 0xce, 0x11, 0x86, 0xc6, 0x81, 0x65, 0xf4, 0xb4, 0x8b,
	0x3d, 0xcc, 0x83, 0xa2, 0xa7, 0x09, 0x32, 0x76, 0x52, 0x0a, 0x3b, 0x78, 0x1a, 0xa9, 0x09, 0x18,
	0xac, 0x5b, 0x4c, 0x53, 0x61, 0xdf, 0xc2, 0x8f, 0xe2, 0xc7, 0xf0, 0xb8, 0xa3, 0x47, 0xd9, 0xbe,
	0x88, 0x34, 0xed, 0x46, 0x19, 0x78, 0x7b, 0x9f, 0xe7, 0xfd, 0xf7, 0xeb, 0xdb, 0x80, 0x9f, 0xe4,
	0x32, 0xe5, 0x91, 0xd2, 0x0b, 0xb3, 0x20, 0x58, 0x25, 0xe1, 0x17, 0x06, 0x7f, 0x9a, 0x09, 0xfd,
	0xc8, 0xb4, 0x99, 0x0b, 0x4d, 0xda, 0x80, 0x25, 0xa7, 0x7e, 0x1f, 0x0d, 0xbc, 0x18, 0x4b, 0x4e,
	0x4e, 0xa1, 0x95, 0x67, 0x42, 0xcf, 0x24, 0xa7, 0xc8, 0x9a, 0xcd, 0x42, 0x4e, 0x38, 0x39, 0x07,
	0x50, 0x65, 0x4f, 0x91, 0x73, 0x6d, 0xce, 0xab, 0x9c, 0x09, 0x27, 0x21, 0x1c, 0xb1, 0x54, 0xb2,
	0x6c, 0xb6, 0xed, 0x6e, 0xd8, 0x0a, 0xdf, 0x9a, 0xd3, 0x72, 0xc4, 0x05, 0x1c, 0x30, 0xa5, 0x32,
	0xda, 0xec, 0xbb, 0x03, 0x7f, 0x78, 0x16, 0xa9, 0x24, 0xaa, 0xa1, 0x44, 0x23, 0xa5, 0xb2, 0xfb,
	0xb9, 0xd1, 0xcb, 0xd8, 0x96, 0x91, 0x2e, 0x34, 0xd4, 0xcb, 0x62, 0x2e, 0x68, 0xcb, 0x8e, 0x2a,
	0x05, 0xa1, 0xd0, 0x7a, 0xd6, 0x82, 0x19, 0xc1, 0x29, 0xf4, 0xd1, 0xc0, 0x8d, 0xb7, 0xb2, 0x20,
	0xcc, 0x15, 0x2f, 0xc2, 0x19, 0x33, 0xf4, 0xd0, 0x26, 0xbd, 0xca, 0x19, 0x99, 0xde, 0x15, 0x78,
	0xbb, 0x0d, 0xa4, 0x03, 0xee, 0xab, 0x58, 0x56, 0x9f, 0x58, 0x84, 0xc5, 0xb6, 0x0f, 0x96, 0xe6,
	0x82, 0x62, 0xdb, 0x58, 0x8a, 0x1b, 0x7c, 0x8d, 0xc2, 0x27, 0x20, 0x35, 0xcc, 0x58, 0xbc, 0xe7,
	0x22, 0x33, 0xff, 0x1f, 0x6a, 0x87, 0x8d, 0xeb, 0xd8, 0x5d, 0x68, 0xa4, 0xf2, 0x4d, 0x1a, 0x7b,
	0x39, 0x37, 0x2e, 0xc5, 0xf0, 0x01, 0x3a, 0xb5, 0xd1, 0xe3, 0x5c, 0x72, 0x41, 0x6e, 0xa1, 0x3d,
	0x16, 0xa6, 0xfe, 0x8f, 0x4e, 0xf6, 0x2e, 0x55, 0x21, 0xf4, 0x8e, 0xf7, 0xfc, 0xd0, 0xb9, 0xa3,
	0xdf, 0xeb, 0x00, 0xad, 0xd6, 0x01, 0xfa, 0x5d, 0x07, 0xe8, 0x73, 0x13, 0x38, 0xab, 0x4d, 0xe0,
	0xfc, 0x6c, 0x02, 0x27, 0x69, 0xda, 0x37, 0x70, 0xf9, 0x17, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x37,
	0xd8, 0x50, 0x12, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserPartnerGuideClient is the client API for UserPartnerGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserPartnerGuideClient interface {
	GetUserPartner(ctx context.Context, in *UserPartnerRequest, opts ...grpc.CallOption) (*UserPartner, error)
}

type userPartnerGuideClient struct {
	cc *grpc.ClientConn
}

func NewUserPartnerGuideClient(cc *grpc.ClientConn) UserPartnerGuideClient {
	return &userPartnerGuideClient{cc}
}

func (c *userPartnerGuideClient) GetUserPartner(ctx context.Context, in *UserPartnerRequest, opts ...grpc.CallOption) (*UserPartner, error) {
	out := new(UserPartner)
	err := c.cc.Invoke(ctx, "/pb.UserPartnerGuide/GetUserPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPartnerGuideServer is the server API for UserPartnerGuide service.
type UserPartnerGuideServer interface {
	GetUserPartner(context.Context, *UserPartnerRequest) (*UserPartner, error)
}

// UnimplementedUserPartnerGuideServer can be embedded to have forward compatible implementations.
type UnimplementedUserPartnerGuideServer struct {
}

func (*UnimplementedUserPartnerGuideServer) GetUserPartner(ctx context.Context, req *UserPartnerRequest) (*UserPartner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPartner not implemented")
}

func RegisterUserPartnerGuideServer(s *grpc.Server, srv UserPartnerGuideServer) {
	s.RegisterService(&_UserPartnerGuide_serviceDesc, srv)
}

func _UserPartnerGuide_GetUserPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPartnerGuideServer).GetUserPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserPartnerGuide/GetUserPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPartnerGuideServer).GetUserPartner(ctx, req.(*UserPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserPartnerGuide_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserPartnerGuide",
	HandlerType: (*UserPartnerGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPartner",
			Handler:    _UserPartnerGuide_GetUserPartner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "build.proto",
}

func (m *UserPartner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPartner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPartner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != 0 {
		i = encodeVarintBuild(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBuild(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Created != 0 {
		i = encodeVarintBuild(dAtA, i, uint64(m.Created))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintBuild(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Apps) > 0 {
		for k := range m.Apps {
			v := m.Apps[k]
			baseI := i
			i = encodeVarintBuild(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBuild(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBuild(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AliasUserId) > 0 {
		i -= len(m.AliasUserId)
		copy(dAtA[i:], m.AliasUserId)
		i = encodeVarintBuild(dAtA, i, uint64(len(m.AliasUserId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PartnerId) > 0 {
		i -= len(m.PartnerId)
		copy(dAtA[i:], m.PartnerId)
		i = encodeVarintBuild(dAtA, i, uint64(len(m.PartnerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintBuild(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserPartnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPartnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPartnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintBuild(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintBuild(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintBuild(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBuild(dAtA []byte, offset int, v uint64) int {
	offset -= sovBuild(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserPartner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBuild(uint64(l))
	}
	l = len(m.PartnerId)
	if l > 0 {
		n += 1 + l + sovBuild(uint64(l))
	}
	l = len(m.AliasUserId)
	if l > 0 {
		n += 1 + l + sovBuild(uint64(l))
	}
	if len(m.Apps) > 0 {
		for k, v := range m.Apps {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBuild(uint64(len(k))) + 1 + sovBuild(uint64(v))
			n += mapEntrySize + 1 + sovBuild(uint64(mapEntrySize))
		}
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovBuild(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovBuild(uint64(m.Created))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBuild(uint64(l))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovBuild(uint64(m.UpdatedAt))
	}
	return n
}

func (m *UserPartnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBuild(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovBuild(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovBuild(uint64(m.Limit))
	}
	return n
}

func sovBuild(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBuild(x uint64) (n int) {
	return sovBuild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserPartner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPartner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPartner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Apps == nil {
				m.Apps = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBuild
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBuild
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBuild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBuild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Apps[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPartnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPartnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPartnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuild(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBuild
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBuild
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBuild
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBuild        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuild          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBuild = fmt.Errorf("proto: unexpected end of group")
)
